devtools::install_github("abresler/nbastatR", upgrade = TRUE)
library(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools", repos = https://cloud.r-project.org/, upgrade = TRUE)
install.packages("devtools", repos = "https://cloud.r-project.org/", upgrade = TRUE)
library(devtools)
install.packages("devtools", repos = "https://cloud.r-project.org/", upgrade = TRUE, dependencies = TRUE)
library(devtools)
install.packages("devtools", repos = "https://cloud.r-project.org/", upgrade = TRUE, dependencies = TRUE)
install.packages("glue")
library(devtools)
devtools::install_github("abresler/nbastatR", upgrade = TRUE)
devtools::install_github("abresler/nbastatR", upgrade = TRUE, force = TRUE)
library(nbastatR)
a <- all_nba_teams(return_message = TRUE)
print(a)
a <- assign_nba_teams()
print(a)
print(typeof(a))
install.packages("datatable")
install.packages("data.table")
df <- data.frame(matrix(unlist(a), nrow=length(a), byrow=T))
print(df)
df <- data.table(matrix(unlist(a), nrow=length(a), byrow=T))
df <- data_table(matrix(unlist(a), nrow=length(a), byrow=T))
df_reduce <- df[, isNonNBATeam == 0]
df_reduce <- df[, df[9] == 0]
df_reduce <- df[, 9]
df_reduce <- df[, 9, drop = FALSE]
print(df_reduce)
df_reduce <- df[, 8, drop = FALSE]
print(df_reduce)
df_reduce <- df[8, drop = FALSE]
print(df_reduce)
df_reduce <- df[9, drop = FALSE]
print(df_reduce)
df <- data.frame(matrix(unlist(a), nrow=length(a), byrow=T))
print(df)
df <- data.frame(matrix(unlist(a), nrow=length(a), byrow=T))
print(df[9])
print(df[,9])
print(a[9])
print(a[9, "isNonNBATeam" == 0])
print(a[, "isNonNBATeam" == 0])
print(a[, "isNonNBATeam" = 0])
print(a[, "isNonNBATeam" == 0])
print(a[, "isNonNBATeam"])
print(a[, "isNonNBATeam" < 1])
print(a[, "isNonNBATeam" == 1])
print(a[, "isNonNBATeam" == '1'])
datatablesolution = setDT(a)
library(data.table)
datatablesolution = setDT(a)
print(datatablesolution)
print(datatablesolution[, "isNonNBATeam" == 0])
print(datatablesolution["isNonNBATeam" == 0])
print(datatablesolution["isNonNBATeam" == 1])
print(datatablesolution[isNonNBATeam == 1])
print(datatablesolution[isNonNBATeam == 1, .(isNonNBATeam)])
print(datatablesolution[isNonNBATeam == 0, .(isNonNBATeam)])
print(datatablesolution[isNonNBATeam == 0])
schedule <- current_schedule()
print(schedule)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(devtools)
library(data.table)
library(xlsx)
install.packages("xlsx", dependencies = TRUE)
library(xlsx)
install.packages("openxlsx")
library(openxlsx)
write.xlsx(schedule, 'schedule_table.xlsx')
seasons_scheduleData <- seasons_schedule(seasons = c(2018))
write.xlsx(schedule, 'seasons_schedule_table.xlsx')
seasons_scheduleData <- seasons_schedule(seasons = c(2018))
write.xlsx(seasons_scheduleData, 'seasons_schedule_table.xlsx')
write.xlsx(seasons_scheduleData, 'seasons_schedule_table.xlsx')
seasons_scheduleData <- seasons_schedule(seasons = c(2017))
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional", "Advanced", "Scoring", "Misc", "Usage", "Four Factors", "Tracking"), result_types = c("player", "team"))
write.xlsx(boxdata_scores, 'box_scores_table.xlsx')
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"))
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE, assign_to_environment = TRUE, return_message = TRUE)
boxdata_scores <- box_scores(game_ids = c(0011800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE, assign_to_environment = TRUE, return_message = TRUE)
devtools::install_github("abresler/nbastatR", upgrade = TRUE, force = TRUE)
devtools::install_github("abresler/nbastatR", upgrade = TRUE, force = TRUE, dependencies = TRUE)
library(nbastatR)
teams <- assign_nba_teams()
teamstable = setDT(teams)
print(teamstable[isNonNBATeam == 0])
print(teams)
teams <- assign_nba_teams()
library(devtools)
library(data.table)
library(openxlsx)
library(nbastatR)
teams <- assign_nba_teams()
schedule <- current_schedule()
print(schedule)
write.xlsx(schedule, 'schedule_table.xlsx')
seasons_scheduleData <- seasons_schedule(seasons = c(2017))
boxdata_scores <- box_scores(game_ids = c(0011800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE, assign_to_environment = TRUE, return_message = TRUE)
boxdata_scores <- box_scores(game_ids = c(0011800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE)
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE)
install.packages("devtools", repos = "https://cloud.r-project.org/", upgrade = TRUE, dependencies = TRUE)
install.packages("glue")
install.packages("data.table")
install.packages("openxlsx")
library(devtools)
library(data.table)
library(openxlsx)
devtools::install_github("abresler/nbastatR", upgrade = TRUE, force = TRUE, dependencies = TRUE)
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE)
library(nbastatR)
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE)
install.packages("purrr")
install.packages("purrr")
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE)
library(nbastatR)
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE)
library(nbastatR)
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE)
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE)
write.xlsx(boxdata_scores, 'box_scores_table.xlsx')
library(openxlsx)
write.xlsx(boxdata_scores, 'box_scores_table.xlsx')
library(devtools)
library(data.table)
library(openxlsx)
devtools::install_github("abresler/nbastatR", upgrade = TRUE, force = TRUE, dependencies = TRUE)
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"), join_data = TRUE)
write.xlsx(boxdata_scores, 'box_scores_table.xlsx')
boxdata_scores <- box_scores(game_ids = c(11800001), box_score_types = c("Traditional"), result_types = c("team"))
write.xlsx(boxdata_scores, 'box_scores_table.xlsx')
print(boxdata_scores)
library(devtools)
library(data.table)
library(openxlsx)
library(nbastatR)
boxdata_scores <- box_scores(game_ids = c(0011800001), box_score_types = c("Traditional"), result_types = c("team"))
box_scores(game_ids = c(21700002, 21700003), box_score_types = c("Traditional", "Advanced", "Scoring", "Misc", "Usage", "Four Factors", "Tracking"), result_types = c("player", "team"), join_data = TRUE, assign_to_environment = TRUE, return_message = TRUE)
devtools::install_github("abresler/nbastatR", upgrade = TRUE, force = TRUE, dependencies = TRUE)
library(nbastatR)
library(future)
plan(multiprocess)
game_logs(seasons = 2010:2019)
game <- game_logs(seasons = 2019)
write.xlsx(game, 'game_table.xlsx')
teams_stats <- bref_teams_stats(seasons = 2019, return_message = TRUE,
assign_to_environment = TRUE, nest_data = FALSE, join_data = TRUE,
widen_data = TRUE)
write.xlsx(teams_stats, 'teams_stats_table.xlsx')
seasons_schedule2 <- seasons_schedule(seasons = 2019, season_types = "Regular Season",
parse_boxscores = F, box_score_tables = c("Traditional"),
nest_data = FALSE, return_message = TRUE)
write.xlsx(seasons_schedule2, 'seasons_schedule2_table.xlsx')
seasons_schedule2 <- seasons_schedule(seasons = 2019, season_types = "Regular Season",
parse_boxscores = T, box_score_tables = c("Traditional"),
nest_data = FALSE, return_message = TRUE)
seasons_schedule2 <- seasons_schedule(seasons = 2019, season_types = "Regular Season", parse_boxscores = T, box_score_tables = c("Traditional"), nest_data = FALSE, return_message = TRUE)
seasons_schedule2 <- seasons_schedule(seasons = 2019, season_types = "Regular Season", parse_boxscores = T, box_score_tables = c("Traditional"))
ab <- win_probability(game_ids = c(21700002, 21700005), filter_non_plays = T,
nest_data = FALSE,
return_message = TRUE)
write.xlsx(ab, 'probabilty_table.xlsx')
game_logs(seasons = 2019)
source('D:/AlbertVillarOrtiz/Nueva carpeta (3)/Universidad/4to/TFG/ML022719AVO/Codigo/R/plays/main.R')
a = game_logs(seasons = 2019)
print(a)
for (iter in 2009:2016) {
games = game_logs(seasons = iter)
write.xlsx(games, 'D:/AlbertVillarOrtiz/Nueva carpeta (3)/Universidad/4to/TFG/ML022719AVO/Codigo/python/dataInit/games/games'+iter+'.xlsx')
}
library(nbastatR)
library(future)
library(xlsx)
plan(multiprocess)
for (iter in 2009:2016) {
games = game_logs(seasons = iter)
write.xlsx(games, 'D:/AlbertVillarOrtiz/Nueva carpeta (3)/Universidad/4to/TFG/ML022719AVO/Codigo/python/dataInit/games/games'+iter+'.xlsx')
}
for (iter in 2009:2016) {
games = game_logs(seasons = iter)
write.xlsx(games, paste0('D:/AlbertVillarOrtiz/Nueva carpeta (3)/Universidad/4to/TFG/ML022719AVO/Codigo/python/dataInit/games/games',iter,'.xlsx'))
}
games = game_logs(seasons = 2009)
write.xlsx(games, paste0('D:/AlbertVillarOrtiz/Nueva carpeta (3)/Universidad/4to/TFG/ML022719AVO/Codigo/python/dataInit/games/games-2009.xlsx'))
write.xlsx(games, paste0('games-2009.xlsx'))
write.xlsx(games, 'games-2009.xlsx')
install.packages('openxlsx')
library(openxlsx)
#write.xlsx(games, 'games-2009.xlsx')
openxlsx::write.xlsx(games, 'games-2009.xlsx')
library(nbastatR)
library(future)
library(openxlsx)
plan(multiprocess)
for (iter in 2009:2016) {
games = game_logs(seasons = iter)
openxlsx::write.xlsx(games, paste0('games-', iter, '.xlsx'))
}
teams = bref_teams_stats(seasons = 2009)
print(teams)
openxlsx::write.xlsx(teams, paste0('teams-', 2009, '.xlsx'))
print(teams[0])
print(teams['Team Data'])
teams = seasons_schedule(seasons = c(2009))
openxlsx::write.xlsx(teams, paste0('teams-', 2009, '.xlsx'))
openxlsx::write.xlsx(teams, paste0('teams-', 2009, '.xlsx'))
teams = standings(seasons = 2009, season_types = "Regular Season")
openxlsx::write.xlsx(teams, paste0('teams-', 2009, '.xlsx'))
teams = teams_tables(teams = c("Brooklyn Nets", "New York Knicks"),
seasons = 2009, tables = c("splits", "shooting"), measures = "Base", modes = c("PerGame", "Totals"))
openxlsx::write.xlsx(teams, paste0('teams-', 2009, '.xlsx'))
teams = teams_annual_stats(all_active_teams = T,
modes = c("Totals"),
return_message = TRUE,
nest_data =F)
openxlsx::write.xlsx(teams, paste0('teams-', 2009, '.xlsx'))
print(teams['Team Data'])
openxlsx::write.xlsx(teams, paste0('teams-', 2009, '.xlsx'))
#teams = teams_annual_stats(all_active_teams = T, modes = c("Totals"), return_message = TRUE, nest_data =F)
teams = bref_teams_stats(seasons = 2009)
openxlsx::write.xlsx(teams, paste0('teams-', 2009, '.xlsx'))
print(teams)
print(teams[0])
print(teams.Team Data)
print(teams.dataTable)
print(teams$dataTable)
openxlsx
openxlsx
library(openxlsx)
openxlsx::write.xlsx(teams$dataTable, paste0('teams-', 2009, '.xlsx'))
for (iter in 2009:2016) {
#games = game_logs(seasons = iter)
teams = bref_teams_stats(seasons = iter)
#openxlsx::write.xlsx(games, paste0('games-', iter, '.xlsx'))
openxlsx::write.xlsx(teams$dataTable, paste0('teams-', iter, '.xlsx'))
}
players = bref_players_stats(seasons = 2009, tables = c("advanced", "totals"))
openxlsx::write.xlsx(players, paste0('players-', 2009, '.xlsx'))
library(nbastatR)
library(future)
library(openxlsx)
plan(multiprocess)
# OBTENER DATOS SOBRE LOS JUGADORES
for (iter in 2009:2016) {
players = bref_players_stats(seasons = iter, tables = c("advanced", "totals"))
openxlsx::write.xlsx(players, paste0('players-', iter, '.xlsx'))
}
library(nbastatR)
library(future)
library(openxlsx)
plan(multiprocess)
# OBTENER DATOS SOBRE LOS PARTIDOS
for (iter in 2004:2016) {
games = game_logs(seasons = iter)
openxlsx::write.xlsx(games, paste0('games-', iter, '.xlsx'))
}
# OBTENER DATOS SOBRE LOS PARTIDOS
for (iter in 2004:2016) {
games = game_logs(seasons = iter)
openxlsx::write.xlsx(games, paste0('games-', iter, '.xlsx'))
}
library(nbastatR)
library(future)
library(openxlsx)
plan(multiprocess)
# OBTENER DATOS ROSTER TEAM
team_season_roster(team = "Denver Nuggets", season = 2006)
teams_shots(teams = "Brooklyn Nets",
seasons = 2018)
nba_teams_seasons()
dictionary_bref_teams()
bref_injuries()
team_season_roster(team = "Denver Nuggets", season = 2006:2010)
team_season_roster(team = "Denver Nuggets", season = 2006)
team_season_roster(season = iter)
team_season_roster(season = iter)
seasons_rosters(2015)
# OBTENER DATOS ROSTER TEAM
for (iter in 2004:2016) {
rosters = seasons_rosters(iter)
openxlsx::write.xlsx(rosters, paste0('rosters-', iter, '.xlsx'))
}
rosters = seasons_rosters(2015)
rosters = seasons_rosters(2016)
library(nbastatR)
library(future)
library(openxlsx)
library(dplyr)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(nbastatR)
library(future)
library(openxlsx)
library(dplyr)
library(tidyverse)
plan(multiprocess)
# OBTENER DATOS ROSTER TEAM
for (iter in 2004:2016) {
rosters <- seasons_rosters(seasons = iter)
openxlsx::write.xlsx(rosters, paste0('rosters-', iter, '.xlsx'))
}
